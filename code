import org.apache.commons.math3.optimization.GoalType;
import org.apache.commons.math3.optimization.PointValuePair;
import org.apache.commons.math3.optimization.linear.LinearConstraint;
import org.apache.commons.math3.optimization.linear.LinearObjectiveFunction;
import org.apache.commons.math3.optimization.linear.Relationship;
import org.apache.commons.math3.optimization.linear.SimplexSolver;
import java.util.ArrayList;
import java.util.Collection;

public class Math {
    public static void main(String[] args) {
        //прогон все условия, входные табл. проверка 2,3
        //прогон с дополнительными условиями x>=0

        //(leq<=, eq =, geq>=)
        Collection<LinearConstraint> constraints = new ArrayList<LinearConstraint>();
        //1
        constraints.add(new LinearConstraint(new double[]{200, 1, -7000, 0}, Relationship.LEQ, 0));
        //2
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 1}, Relationship.EQ, 1));
        //3
        constraints.add(new LinearConstraint(new double[]{-1, 1, 0, 0}, Relationship.GEQ, 0));
        //4
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 100}, Relationship.GEQ, 100));
        //5
        constraints.add(new LinearConstraint(new double[]{0, 10, 1000, 0}, Relationship.LEQ, 3000));

        //>=0
        /*
        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 0, 1, 0}, Relationship.GEQ, 0));
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 1}, Relationship.GEQ, 0));
        */

        constraints.add(new LinearConstraint(new double[]{1, 0, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{0, 1, 0, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{0, 0, 1, 0}, Relationship.LEQ, 1));
        constraints.add(new LinearConstraint(new double[]{0, 0, 0, 1}, Relationship.LEQ, 1));


        //F=5x1+3x2 > max
        LinearObjectiveFunction f = new LinearObjectiveFunction(new double[]{0, 1.5, 30, 100}, 0);
        PointValuePair solution = new SimplexSolver().optimize(f, constraints, GoalType.MAXIMIZE, true);
        double x1 = solution.getPoint()[0];
        double x2 = solution.getPoint()[1];
        double x3 = solution.getPoint()[2];
        double x4 = solution.getPoint()[3];
        double J = solution.getValue();//проверь когда много переменных


        //System.out.println("x1="+ Double.toString(x1)+ "\n" + "x2="+ Double.toString(x2)+ "\n" +"x3="+ Double.toString(x3)+ "\n" +"J="+ Double.toString(J)+ "\n");
        System.out.println("x1 = "+ Double.toString(x1)+ "\n" + "x2 = "+ Double.toString(x2)+ "\n" +"x3 = "+ Double.toString(x3)+ "\n" +"x4 = "+ Double.toString(x4)+ "\n" +"J = "+ Double.toString(J)+ "\n");

    }
}
/*
Набор данных для теста симплекс метода:
-3x1+5x2<=25
-2x1+5x2<=30
x1<=10
3x1-3x2<=6
x1,x2>=0
F=6x1+5x2 -> max
Ответ:
x1 = 10, x2 = 10
F(X) = 6•10 + 5•10 = 110
*/
